{
	"home": {
		"title": "react-strings",
		"subtitle": "Keep your content organized, easy to update, and multilingualâ€”built for React.",
		"developer": "Developed by ",
		"sum": {
			"title": "Summary",
			"data": "This guide shows the implementation of react-strings on a static website developed with nextjs and typescript using locales. This website was developed with the technologies mentioned in this guide, you can find the source code in the following ",
			"repository": "repository"
		},
		"links": {
			"dev": "https://intorandom.com",
			"repo": "https://github.com/intoRandom/react-strings-next",
			"coffee": "https://buymeacoffee.com/intorandom"
		},
		"npm": "npm install react-strings",
		"inst": {
			"title": "Installation",
			"data": "react-strings can easily be installed by:"
		},
		"config": {
			"title": "Configuration",
			"data": "react-strings just need the following files:",
			"files": [
				{
					"data": "Languages, these files contains the information corresponding to each language",
					"file": [
						"@/data/messages/en.json ",
						"",
						"{ ",
						"  \"title\": \"Welcome to react-strings\",",
						"  \"version\": \"Current version: {{version}}\", // include multiple {{values}} ",
						"  \"features\": [",
						"    { \"title\": \"Autocompletion\", \"data\": \"Remember keys\" },",
						"    { \"title\": \"Languages\", \"data\": \"Multi language support\" },",
						"    { \"title\": \"Identification\", \"data\": \"Browser & storage\" }",
						"  ]",
						"}"
					]
				},
				{
					"data": "Configuration, this file will have the following structure and is used to inicialice the strings management ",
					"file": [
						"@/data/stringsConfig.ts ",
						"",
						"'use client' ",
						"",
						"import { createStrings } from 'react-strings'; ",
						"",
						"// Import your main language, for key autocomplete ",
						"import en from './messages/en.json; ",
						"",
						"const initStrings: LangConfigType = createStrings({ ",
						"  // strings need just one key, others will be ignored",
						"  // direction: optional, useful for rtl languages",
						"  strings: { en: { data: en, direction: 'ltr' } },",
						"  // import other languages as promises, use them on demand",
						"  languages: { ",
						"    es: { loader: () => import('@/data/messages/es.json') },",
						"    ar: { loader: () => import('@/data/messages/ar.json'), direction:'rtl' }",
						"  },",
						"  // browser: optional, use this for get browser languages",
						"  browser: true, ",
						"  // storage: optional, use this for preserve user preferences",
						"  storage: true,",
						"  // bgColor: optional, use CSS colors default white, used in transitions to avoid flickering",
						"  bgColor: 'white',",
						"  // duration: optional, default 200, transition time in mili seconds",
						"  duration: 200 ",
						"});",
						"",
						"// getLocale: return a locale after storage and browser resolution",
						"export const { StringsProvider, useStrings, getLocale } = initStrings;"
					]
				},
				{
					"data": "Container, this should be located at the layout of the project of route",
					"file": [
						"@/app/layout.tsx ",
						"",
						"... ",
						"import { StringsProvider } from '@/data/stringsConfig'; ",
						"",
						"export default function RootLayout({ ",
						"  children, ",
						"}: Readonly<{ ",
						"  children: React.ReactNode; ",
						"}>) { ",
						"   return ( ",
						"    <html lang='en'> ",
						"      <body > ",
						"        {/* locale: optional, used for single language bundle */}",
						"        <StringsProvider locale:'en' > ",
						"          {children} ",
						"        </StringsProvider> ",
						"      </body> ",
						"    </html> ",
						"  ); ",
						"}"
					]
				},
				{
					"data": "That is all it takes to give your project support for multiple languages. For get the strings or arrays for each language just use the hook useStrings inside a component",
					"file": [
						"\"use client\"; ",
						"",
						"import { useStrings } from '@/data/stringsConfig'; ",
						"",
						" const UseHooks = () => { ",
						"  const { Str, Arr, language, setLanguage } = useStrings(); ",
						"",
						"  return ( ",
						"    <section> ",
						"      {/* this return the current language */} ",
						"      <h1>{language}</h1> ",
						"",
						"      {/* this button change the current language */} ",
						"      {/* setLanguage is deactivated if locale in provider */} ",
						"      <button onClick={()=>setLanguage(\"es\")}>Change Language</button> ",
						"",
						"      {/* this return a string */} ",
						"      <h2>{Str.home.title()}</h2> ",
						"",
						"      {/* this return a string with a dynamic value*/} ",
						"      <p>{Str.home.version({ version: '0.2.0' })}</p> ",
						"",
						"      {/* this return an array */} ",
						"      <ul> ",
						"        {Arr.home.features.map((item) => ( ",
						"          <li key={item.title}> ",
						"            <h2>{item.title}</h2> ",
						"            <p>{item.data}</p> ",
						"          </li> ",
						"        ))} ",
						"      </ul> ",
						"    </section> ",
						"  ); ",
						"}; ",
						"",
						"export default UseHooks; "
					]
				}
			]
		},
		"final": "It was fun (and sometimes very frustrating ðŸ˜…) building this package! If youâ€™d like to support its journey, a small donation goes a long way..",
		"coffee": "Buy me a coffee",
		"end": "Every spark makes the project shine brighter"
	}
}
